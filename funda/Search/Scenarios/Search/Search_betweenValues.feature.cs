// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Funda.Scenarios.Search
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SearchBetweenValuesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "Search_betweenValues.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Search between values", "\tTo avoid failures\r\n\tAs a quality analyst\r\n\tI want to search on the site between " +
                    "differents combinations of values", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Search between values")))
            {
                global::Funda.Scenarios.Search.SearchBetweenValuesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
testRunner.Given("I have data mass for sale and for rent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have entered on the Funda homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Sale - Default From value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForSale_DefaultFromValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Sale - Default From value", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 13
 testRunner.Given("I select the navigation item For Sale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.Then("I have a dropdown field called From with default value \' € 0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Sale - Default To value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForSale_DefaultToValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Sale - Default To value", null, ((string[])(null)));
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 18
 testRunner.Given("I select the navigation item For Sale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.Then("I have a dropdown field called To with default value \'No limit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Sale - List of From values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForSale_ListOfFromValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Sale - List of From values", null, ((string[])(null)));
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 23
 testRunner.Given("I select the navigation item For Sale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.When("I click on the dropdown fiel called From", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table1.AddRow(new string[] {
                        "Other"});
            table1.AddRow(new string[] {
                        "€ 0"});
            table1.AddRow(new string[] {
                        "€ 50,000"});
            table1.AddRow(new string[] {
                        "€ 75,000"});
            table1.AddRow(new string[] {
                        "€ 100,000"});
            table1.AddRow(new string[] {
                        "€ 125,000"});
            table1.AddRow(new string[] {
                        "€ 150,000"});
            table1.AddRow(new string[] {
                        "€ 175,000"});
            table1.AddRow(new string[] {
                        "€ 200,000"});
            table1.AddRow(new string[] {
                        "€ 225,000"});
            table1.AddRow(new string[] {
                        "€ 250,000"});
            table1.AddRow(new string[] {
                        "€ 275,000"});
            table1.AddRow(new string[] {
                        "€ 300,000"});
            table1.AddRow(new string[] {
                        "€ 325,000"});
            table1.AddRow(new string[] {
                        "€ 350,000"});
            table1.AddRow(new string[] {
                        "€ 375,000"});
            table1.AddRow(new string[] {
                        "€ 400,000"});
            table1.AddRow(new string[] {
                        "€ 450,000"});
            table1.AddRow(new string[] {
                        "€ 500,000"});
            table1.AddRow(new string[] {
                        "€ 550,000"});
            table1.AddRow(new string[] {
                        "€ 600,000"});
            table1.AddRow(new string[] {
                        "€ 650,000"});
            table1.AddRow(new string[] {
                        "€ 700,000"});
            table1.AddRow(new string[] {
                        "€ 750,000"});
            table1.AddRow(new string[] {
                        "€ 800,000"});
            table1.AddRow(new string[] {
                        "€ 900,000"});
            table1.AddRow(new string[] {
                        "€ 1,000,000"});
            table1.AddRow(new string[] {
                        "€ 1,250,000"});
            table1.AddRow(new string[] {
                        "€ 1,500,000"});
            table1.AddRow(new string[] {
                        "€ 2,000,000"});
#line 25
 testRunner.Then("I have on the dropdown field called From the options", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Sale - List of To values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForSale_ListOfToValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Sale - List of To values", null, ((string[])(null)));
#line 58
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 59
 testRunner.Given("I select the navigation item For Sale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.When("I click on the dropdown fiel called To", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table2.AddRow(new string[] {
                        "Other"});
            table2.AddRow(new string[] {
                        "€ 50,000"});
            table2.AddRow(new string[] {
                        "€ 75,000"});
            table2.AddRow(new string[] {
                        "€ 100,000"});
            table2.AddRow(new string[] {
                        "€ 125,000"});
            table2.AddRow(new string[] {
                        "€ 150,000"});
            table2.AddRow(new string[] {
                        "€ 175,000"});
            table2.AddRow(new string[] {
                        "€ 200,000"});
            table2.AddRow(new string[] {
                        "€ 225,000"});
            table2.AddRow(new string[] {
                        "€ 250,000"});
            table2.AddRow(new string[] {
                        "€ 275,000"});
            table2.AddRow(new string[] {
                        "€ 300,000"});
            table2.AddRow(new string[] {
                        "€ 325,000"});
            table2.AddRow(new string[] {
                        "€ 350,000"});
            table2.AddRow(new string[] {
                        "€ 375,000"});
            table2.AddRow(new string[] {
                        "€ 400,000"});
            table2.AddRow(new string[] {
                        "€ 450,000"});
            table2.AddRow(new string[] {
                        "€ 500,000"});
            table2.AddRow(new string[] {
                        "€ 550,000"});
            table2.AddRow(new string[] {
                        "€ 600,000"});
            table2.AddRow(new string[] {
                        "€ 650,000"});
            table2.AddRow(new string[] {
                        "€ 700,000"});
            table2.AddRow(new string[] {
                        "€ 750,000"});
            table2.AddRow(new string[] {
                        "€ 800,000"});
            table2.AddRow(new string[] {
                        "€ 900,000"});
            table2.AddRow(new string[] {
                        "€ 1,000,000"});
            table2.AddRow(new string[] {
                        "€ 1,250,000"});
            table2.AddRow(new string[] {
                        "€ 1,500,000"});
            table2.AddRow(new string[] {
                        "€ 2,000,000"});
            table2.AddRow(new string[] {
                        "No limit"});
#line 61
 testRunner.Then("I have on the dropdown fiel called To the options", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Sale - Find places between two values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForSale_FindPlacesBetweenTwoValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Sale - Find places between two values", null, ((string[])(null)));
#line 94
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 95
 testRunner.Given("I select the navigation item For Sale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.And("I fill the field Location with value \'<Place>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("I select the field From with value \'<From>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("I select the field To with value \'<To>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.When("I click on the button Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.Then("I should go to the page \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "From",
                        "To",
                        "Place"});
            table3.AddRow(new string[] {
                        "50",
                        "100",
                        "Amsterdam"});
            table3.AddRow(new string[] {
                        "0",
                        "No limit",
                        "Amsterdam"});
            table3.AddRow(new string[] {
                        "50",
                        "No Limit",
                        "Amsterdam"});
            table3.AddRow(new string[] {
                        "0",
                        "100",
                        "Amsterdam"});
#line 101
 testRunner.And("I should see the same amount of results as DB <From> <To> <Place>", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Sale - Find places between other values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForSale_FindPlacesBetweenOtherValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Sale - Find places between other values", null, ((string[])(null)));
#line 108
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 109
 testRunner.Given("I select the navigation item For Sale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
 testRunner.And("I fill the field Location with value \'<Place>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.Then("I select the field From with Other value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 112
 testRunner.And("I fill the field From with the value \'<FromOtherValue>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("I select the field To with Other value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.And("I fill the field To with the value \'<ToOtherValue>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.When("I click on the button Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 116
 testRunner.Then("I should go to the page \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Place",
                        "FromOtherValue",
                        "ToOtherValue"});
            table4.AddRow(new string[] {
                        "Amsterdam",
                        "20",
                        "1000000"});
#line 117
 testRunner.And("I should see the same amount of results as DB <FromOtherValue> <ToOtherValue> <Pl" +
                    "ace>", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Rent - Default From value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForRent_DefaultFromValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Rent - Default From value", null, ((string[])(null)));
#line 123
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 124
 testRunner.Given("I select the navigation item For Rent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 125
 testRunner.Then("I have a dropdown field called From with default value \'€ 0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Rent - Default To value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForRent_DefaultToValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Rent - Default To value", null, ((string[])(null)));
#line 127
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 128
 testRunner.Given("I select the navigation item For Rent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 129
 testRunner.Then("I have a dropdown field called To with default value \'No limit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Rent - List of From values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForRent_ListOfFromValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Rent - List of From values", null, ((string[])(null)));
#line 131
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 132
 testRunner.Given("I select the navigation item For Rent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 133
 testRunner.When("I click on the dropdown fiel called From", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table5.AddRow(new string[] {
                        "Other"});
            table5.AddRow(new string[] {
                        "€ 0"});
            table5.AddRow(new string[] {
                        "€ 50,000"});
            table5.AddRow(new string[] {
                        "€ 75,000"});
            table5.AddRow(new string[] {
                        "€ 100,000"});
            table5.AddRow(new string[] {
                        "€ 125,000"});
            table5.AddRow(new string[] {
                        "€ 150,000"});
            table5.AddRow(new string[] {
                        "€ 175,000"});
            table5.AddRow(new string[] {
                        "€ 200,000"});
            table5.AddRow(new string[] {
                        "€ 225,000"});
            table5.AddRow(new string[] {
                        "€ 250,000"});
            table5.AddRow(new string[] {
                        "€ 275,000"});
            table5.AddRow(new string[] {
                        "€ 300,000"});
            table5.AddRow(new string[] {
                        "€ 325,000"});
            table5.AddRow(new string[] {
                        "€ 350,000"});
            table5.AddRow(new string[] {
                        "€ 375,000"});
            table5.AddRow(new string[] {
                        "€ 400,000"});
            table5.AddRow(new string[] {
                        "€ 450,000"});
            table5.AddRow(new string[] {
                        "€ 500,000"});
            table5.AddRow(new string[] {
                        "€ 550,000"});
            table5.AddRow(new string[] {
                        "€ 600,000"});
            table5.AddRow(new string[] {
                        "€ 650,000"});
            table5.AddRow(new string[] {
                        "€ 700,000"});
            table5.AddRow(new string[] {
                        "€ 750,000"});
            table5.AddRow(new string[] {
                        "€ 800,000"});
            table5.AddRow(new string[] {
                        "€ 900,000"});
            table5.AddRow(new string[] {
                        "€ 1,000,000"});
            table5.AddRow(new string[] {
                        "€ 1,250,000"});
            table5.AddRow(new string[] {
                        "€ 1,500,000"});
            table5.AddRow(new string[] {
                        "€ 2,000,000"});
#line 134
 testRunner.Then("I have on the dropdown field called From the options", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Rent - List of To values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForRent_ListOfToValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Rent - List of To values", null, ((string[])(null)));
#line 167
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 168
 testRunner.Given("I select the navigation item For Rent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 169
 testRunner.When("I click on the dropdown field called To", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table6.AddRow(new string[] {
                        "Other"});
            table6.AddRow(new string[] {
                        "€ 50,000"});
            table6.AddRow(new string[] {
                        "€ 75,000"});
            table6.AddRow(new string[] {
                        "€ 100,000"});
            table6.AddRow(new string[] {
                        "€ 125,000"});
            table6.AddRow(new string[] {
                        "€ 150,000"});
            table6.AddRow(new string[] {
                        "€ 175,000"});
            table6.AddRow(new string[] {
                        "€ 200,000"});
            table6.AddRow(new string[] {
                        "€ 225,000"});
            table6.AddRow(new string[] {
                        "€ 250,000"});
            table6.AddRow(new string[] {
                        "€ 275,000"});
            table6.AddRow(new string[] {
                        "€ 300,000"});
            table6.AddRow(new string[] {
                        "€ 325,000"});
            table6.AddRow(new string[] {
                        "€ 350,000"});
            table6.AddRow(new string[] {
                        "€ 375,000"});
            table6.AddRow(new string[] {
                        "€ 400,000"});
            table6.AddRow(new string[] {
                        "€ 450,000"});
            table6.AddRow(new string[] {
                        "€ 500,000"});
            table6.AddRow(new string[] {
                        "€ 550,000"});
            table6.AddRow(new string[] {
                        "€ 600,000"});
            table6.AddRow(new string[] {
                        "€ 650,000"});
            table6.AddRow(new string[] {
                        "€ 700,000"});
            table6.AddRow(new string[] {
                        "€ 750,000"});
            table6.AddRow(new string[] {
                        "€ 800,000"});
            table6.AddRow(new string[] {
                        "€ 900,000"});
            table6.AddRow(new string[] {
                        "€ 1,000,000"});
            table6.AddRow(new string[] {
                        "€ 1,250,000"});
            table6.AddRow(new string[] {
                        "€ 1,500,000"});
            table6.AddRow(new string[] {
                        "€ 2,000,000"});
            table6.AddRow(new string[] {
                        "No limit"});
#line 170
 testRunner.Then("I have on the dropdown field called To the options", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Rent - Find places between two values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForRent_FindPlacesBetweenTwoValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Rent - Find places between two values", null, ((string[])(null)));
#line 204
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 205
 testRunner.Given("I select the navigation item For Rent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 206
 testRunner.And("I fill the field Location with value \'<Place>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
 testRunner.And("I select the field From with value \'<From>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
 testRunner.And("I select the field To with value \'<To>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
 testRunner.When("I click on the button Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 210
 testRunner.Then("I should go to the page \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "From",
                        "To",
                        "Place"});
            table7.AddRow(new string[] {
                        "50",
                        "100",
                        "Amsterdam"});
            table7.AddRow(new string[] {
                        "0",
                        "No limit",
                        "Amsterdam"});
            table7.AddRow(new string[] {
                        "50",
                        "No Limit",
                        "Amsterdam"});
            table7.AddRow(new string[] {
                        "0",
                        "100",
                        "Amsterdam"});
#line 211
 testRunner.And("I should see the same amount of results as DB <From> <To> <Place>", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("For Rent - Find places between other values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Search between values")]
        public virtual void ForRent_FindPlacesBetweenOtherValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("For Rent - Find places between other values", null, ((string[])(null)));
#line 218
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 219
 testRunner.Given("I select the navigation item For Rent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 220
 testRunner.And("I fill the field Location with value \'<Place>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.Then("I select the field From with Other value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
 testRunner.And("I fill the field From with the value \'<FromOtherValue>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
 testRunner.And("I select the field To with Other value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
 testRunner.And("I fill the field To with the value \'<ToOtherValue>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
 testRunner.When("I click on the button Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 226
 testRunner.Then("I should go to the page \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Place",
                        "FromOtherValue",
                        "ToOtherValue"});
            table8.AddRow(new string[] {
                        "Amsterdam",
                        "20",
                        "1000000"});
#line 227
 testRunner.And("I should see the same amount of results as DB <FromOtherValue> <ToOtherValue> <Pl" +
                    "ace>", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
